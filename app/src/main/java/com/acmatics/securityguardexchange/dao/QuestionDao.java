package com.acmatics.securityguardexchange.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.acmatics.securityguardexchange.dao.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property QuestionId = new Property(0, Long.class, "questionId", true, "QUESTION_ID");
        public final static Property TextKey = new Property(1, String.class, "textKey", false, "TEXT_KEY");
        public final static Property DescriptionKey = new Property(2, String.class, "descriptionKey", false, "DESCRIPTION_KEY");
        public final static Property QuestionTypeId = new Property(3, Long.class, "questionTypeId", false, "QUESTION_TYPE_ID");
        public final static Property QuestionLevelId = new Property(4, Long.class, "questionLevelId", false, "QUESTION_LEVEL_ID");
        public final static Property ImageFlag = new Property(5, Boolean.class, "imageFlag", false, "IMAGE_FLAG");
    };

    private DaoSession daoSession;


    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"QUESTION_ID\" INTEGER PRIMARY KEY ," + // 0: questionId
                "\"TEXT_KEY\" TEXT," + // 1: textKey
                "\"DESCRIPTION_KEY\" TEXT," + // 2: descriptionKey
                "\"QUESTION_TYPE_ID\" INTEGER," + // 3: questionTypeId
                "\"QUESTION_LEVEL_ID\" INTEGER," + // 4: questionLevelId
                "\"IMAGE_FLAG\" INTEGER);"); // 5: imageFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(1, questionId);
        }
 
        String textKey = entity.getTextKey();
        if (textKey != null) {
            stmt.bindString(2, textKey);
        }
 
        String descriptionKey = entity.getDescriptionKey();
        if (descriptionKey != null) {
            stmt.bindString(3, descriptionKey);
        }
 
        Long questionTypeId = entity.getQuestionTypeId();
        if (questionTypeId != null) {
            stmt.bindLong(4, questionTypeId);
        }
 
        Long questionLevelId = entity.getQuestionLevelId();
        if (questionLevelId != null) {
            stmt.bindLong(5, questionLevelId);
        }
 
        Boolean imageFlag = entity.getImageFlag();
        if (imageFlag != null) {
            stmt.bindLong(6, imageFlag ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(Question entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // questionId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // textKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descriptionKey
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // questionTypeId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // questionLevelId
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // imageFlag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setQuestionId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTextKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescriptionKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuestionTypeId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setQuestionLevelId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setImageFlag(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setQuestionId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getQuestionId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getQuestionTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getQuestionLevelDao().getAllColumns());
            builder.append(" FROM QUESTION T");
            builder.append(" LEFT JOIN QUESTION_TYPE T0 ON T.\"QUESTION_TYPE_ID\"=T0.\"QUESTION_TYPE_ID\"");
            builder.append(" LEFT JOIN QUESTION_LEVEL T1 ON T.\"QUESTION_LEVEL_ID\"=T1.\"QUESTION_LEVEL_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Question loadCurrentDeep(Cursor cursor, boolean lock) {
        Question entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        QuestionType questionType = loadCurrentOther(daoSession.getQuestionTypeDao(), cursor, offset);
        entity.setQuestionType(questionType);
        offset += daoSession.getQuestionTypeDao().getAllColumns().length;

        QuestionLevel questionLevel = loadCurrentOther(daoSession.getQuestionLevelDao(), cursor, offset);
        entity.setQuestionLevel(questionLevel);

        return entity;    
    }

    public Question loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Question> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Question> list = new ArrayList<Question>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Question> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Question> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
