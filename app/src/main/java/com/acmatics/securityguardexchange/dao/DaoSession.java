package com.acmatics.securityguardexchange.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.acmatics.securityguardexchange.dao.QuestionType;
import com.acmatics.securityguardexchange.dao.QuestionLevel;
import com.acmatics.securityguardexchange.dao.Question;
import com.acmatics.securityguardexchange.dao.AnswerChoice;
import com.acmatics.securityguardexchange.dao.UserTest;
import com.acmatics.securityguardexchange.dao.TestQuestionMapping;
import com.acmatics.securityguardexchange.dao.TestReport;
import com.acmatics.securityguardexchange.dao.QuizType;
import com.acmatics.securityguardexchange.dao.Quiz;
import com.acmatics.securityguardexchange.dao.QuizQuestion;
import com.acmatics.securityguardexchange.dao.UserQuizReport;

import com.acmatics.securityguardexchange.dao.QuestionTypeDao;
import com.acmatics.securityguardexchange.dao.QuestionLevelDao;
import com.acmatics.securityguardexchange.dao.QuestionDao;
import com.acmatics.securityguardexchange.dao.AnswerChoiceDao;
import com.acmatics.securityguardexchange.dao.UserTestDao;
import com.acmatics.securityguardexchange.dao.TestQuestionMappingDao;
import com.acmatics.securityguardexchange.dao.TestReportDao;
import com.acmatics.securityguardexchange.dao.QuizTypeDao;
import com.acmatics.securityguardexchange.dao.QuizDao;
import com.acmatics.securityguardexchange.dao.QuizQuestionDao;
import com.acmatics.securityguardexchange.dao.UserQuizReportDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig questionTypeDaoConfig;
    private final DaoConfig questionLevelDaoConfig;
    private final DaoConfig questionDaoConfig;
    private final DaoConfig answerChoiceDaoConfig;
    private final DaoConfig userTestDaoConfig;
    private final DaoConfig testQuestionMappingDaoConfig;
    private final DaoConfig testReportDaoConfig;
    private final DaoConfig quizTypeDaoConfig;
    private final DaoConfig quizDaoConfig;
    private final DaoConfig quizQuestionDaoConfig;
    private final DaoConfig userQuizReportDaoConfig;

    private final QuestionTypeDao questionTypeDao;
    private final QuestionLevelDao questionLevelDao;
    private final QuestionDao questionDao;
    private final AnswerChoiceDao answerChoiceDao;
    private final UserTestDao userTestDao;
    private final TestQuestionMappingDao testQuestionMappingDao;
    private final TestReportDao testReportDao;
    private final QuizTypeDao quizTypeDao;
    private final QuizDao quizDao;
    private final QuizQuestionDao quizQuestionDao;
    private final UserQuizReportDao userQuizReportDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        questionTypeDaoConfig = daoConfigMap.get(QuestionTypeDao.class).clone();
        questionTypeDaoConfig.initIdentityScope(type);

        questionLevelDaoConfig = daoConfigMap.get(QuestionLevelDao.class).clone();
        questionLevelDaoConfig.initIdentityScope(type);

        questionDaoConfig = daoConfigMap.get(QuestionDao.class).clone();
        questionDaoConfig.initIdentityScope(type);

        answerChoiceDaoConfig = daoConfigMap.get(AnswerChoiceDao.class).clone();
        answerChoiceDaoConfig.initIdentityScope(type);

        userTestDaoConfig = daoConfigMap.get(UserTestDao.class).clone();
        userTestDaoConfig.initIdentityScope(type);

        testQuestionMappingDaoConfig = daoConfigMap.get(TestQuestionMappingDao.class).clone();
        testQuestionMappingDaoConfig.initIdentityScope(type);

        testReportDaoConfig = daoConfigMap.get(TestReportDao.class).clone();
        testReportDaoConfig.initIdentityScope(type);

        quizTypeDaoConfig = daoConfigMap.get(QuizTypeDao.class).clone();
        quizTypeDaoConfig.initIdentityScope(type);

        quizDaoConfig = daoConfigMap.get(QuizDao.class).clone();
        quizDaoConfig.initIdentityScope(type);

        quizQuestionDaoConfig = daoConfigMap.get(QuizQuestionDao.class).clone();
        quizQuestionDaoConfig.initIdentityScope(type);

        userQuizReportDaoConfig = daoConfigMap.get(UserQuizReportDao.class).clone();
        userQuizReportDaoConfig.initIdentityScope(type);

        questionTypeDao = new QuestionTypeDao(questionTypeDaoConfig, this);
        questionLevelDao = new QuestionLevelDao(questionLevelDaoConfig, this);
        questionDao = new QuestionDao(questionDaoConfig, this);
        answerChoiceDao = new AnswerChoiceDao(answerChoiceDaoConfig, this);
        userTestDao = new UserTestDao(userTestDaoConfig, this);
        testQuestionMappingDao = new TestQuestionMappingDao(testQuestionMappingDaoConfig, this);
        testReportDao = new TestReportDao(testReportDaoConfig, this);
        quizTypeDao = new QuizTypeDao(quizTypeDaoConfig, this);
        quizDao = new QuizDao(quizDaoConfig, this);
        quizQuestionDao = new QuizQuestionDao(quizQuestionDaoConfig, this);
        userQuizReportDao = new UserQuizReportDao(userQuizReportDaoConfig, this);

        registerDao(QuestionType.class, questionTypeDao);
        registerDao(QuestionLevel.class, questionLevelDao);
        registerDao(Question.class, questionDao);
        registerDao(AnswerChoice.class, answerChoiceDao);
        registerDao(UserTest.class, userTestDao);
        registerDao(TestQuestionMapping.class, testQuestionMappingDao);
        registerDao(TestReport.class, testReportDao);
        registerDao(QuizType.class, quizTypeDao);
        registerDao(Quiz.class, quizDao);
        registerDao(QuizQuestion.class, quizQuestionDao);
        registerDao(UserQuizReport.class, userQuizReportDao);
    }
    
    public void clear() {
        questionTypeDaoConfig.getIdentityScope().clear();
        questionLevelDaoConfig.getIdentityScope().clear();
        questionDaoConfig.getIdentityScope().clear();
        answerChoiceDaoConfig.getIdentityScope().clear();
        userTestDaoConfig.getIdentityScope().clear();
        testQuestionMappingDaoConfig.getIdentityScope().clear();
        testReportDaoConfig.getIdentityScope().clear();
        quizTypeDaoConfig.getIdentityScope().clear();
        quizDaoConfig.getIdentityScope().clear();
        quizQuestionDaoConfig.getIdentityScope().clear();
        userQuizReportDaoConfig.getIdentityScope().clear();
    }

    public QuestionTypeDao getQuestionTypeDao() {
        return questionTypeDao;
    }

    public QuestionLevelDao getQuestionLevelDao() {
        return questionLevelDao;
    }

    public QuestionDao getQuestionDao() {
        return questionDao;
    }

    public AnswerChoiceDao getAnswerChoiceDao() {
        return answerChoiceDao;
    }

    public UserTestDao getUserTestDao() {
        return userTestDao;
    }

    public TestQuestionMappingDao getTestQuestionMappingDao() {
        return testQuestionMappingDao;
    }

    public TestReportDao getTestReportDao() {
        return testReportDao;
    }

    public QuizTypeDao getQuizTypeDao() {
        return quizTypeDao;
    }

    public QuizDao getQuizDao() {
        return quizDao;
    }

    public QuizQuestionDao getQuizQuestionDao() {
        return quizQuestionDao;
    }

    public UserQuizReportDao getUserQuizReportDao() {
        return userQuizReportDao;
    }

}
