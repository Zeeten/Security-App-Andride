package com.acmatics.securityguardexchange.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.acmatics.securityguardexchange.dao.TestReport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST_REPORT".
*/
public class TestReportDao extends AbstractDao<TestReport, Long> {

    public static final String TABLENAME = "TEST_REPORT";

    /**
     * Properties of entity TestReport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TestReportId = new Property(0, Long.class, "testReportId", true, "TEST_REPORT_ID");
        public final static Property TestAttemptTime = new Property(1, java.util.Date.class, "testAttemptTime", false, "TEST_ATTEMPT_TIME");
        public final static Property Duration = new Property(2, Integer.class, "duration", false, "DURATION");
        public final static Property Score = new Property(3, Integer.class, "score", false, "SCORE");
        public final static Property AttemptCount = new Property(4, Integer.class, "attemptCount", false, "ATTEMPT_COUNT");
        public final static Property UserTestId = new Property(5, Long.class, "userTestId", false, "USER_TEST_ID");
    };

    private DaoSession daoSession;


    public TestReportDao(DaoConfig config) {
        super(config);
    }
    
    public TestReportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST_REPORT\" (" + //
                "\"TEST_REPORT_ID\" INTEGER PRIMARY KEY ," + // 0: testReportId
                "\"TEST_ATTEMPT_TIME\" INTEGER," + // 1: testAttemptTime
                "\"DURATION\" INTEGER," + // 2: duration
                "\"SCORE\" INTEGER," + // 3: score
                "\"ATTEMPT_COUNT\" INTEGER," + // 4: attemptCount
                "\"USER_TEST_ID\" INTEGER);"); // 5: userTestId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_REPORT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TestReport entity) {
        stmt.clearBindings();
 
        Long testReportId = entity.getTestReportId();
        if (testReportId != null) {
            stmt.bindLong(1, testReportId);
        }
 
        java.util.Date testAttemptTime = entity.getTestAttemptTime();
        if (testAttemptTime != null) {
            stmt.bindLong(2, testAttemptTime.getTime());
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(3, duration);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(4, score);
        }
 
        Integer attemptCount = entity.getAttemptCount();
        if (attemptCount != null) {
            stmt.bindLong(5, attemptCount);
        }
 
        Long userTestId = entity.getUserTestId();
        if (userTestId != null) {
            stmt.bindLong(6, userTestId);
        }
    }

    @Override
    protected void attachEntity(TestReport entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TestReport readEntity(Cursor cursor, int offset) {
        TestReport entity = new TestReport( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // testReportId
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // testAttemptTime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // duration
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // score
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // attemptCount
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // userTestId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TestReport entity, int offset) {
        entity.setTestReportId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTestAttemptTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDuration(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setScore(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAttemptCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUserTestId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TestReport entity, long rowId) {
        entity.setTestReportId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TestReport entity) {
        if(entity != null) {
            return entity.getTestReportId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserTestDao().getAllColumns());
            builder.append(" FROM TEST_REPORT T");
            builder.append(" LEFT JOIN USER_TEST T0 ON T.\"USER_TEST_ID\"=T0.\"USER_TEST_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TestReport loadCurrentDeep(Cursor cursor, boolean lock) {
        TestReport entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserTest userTest = loadCurrentOther(daoSession.getUserTestDao(), cursor, offset);
        entity.setUserTest(userTest);

        return entity;    
    }

    public TestReport loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TestReport> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TestReport> list = new ArrayList<TestReport>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TestReport> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TestReport> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
