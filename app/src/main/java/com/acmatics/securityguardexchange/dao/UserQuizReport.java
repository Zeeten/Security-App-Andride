package com.acmatics.securityguardexchange.dao;

import com.acmatics.securityguardexchange.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER_QUIZ_REPORT".
 */
public class UserQuizReport {

    private Long userQuizReportId;
    private Long userId;
    private Integer duration;
    private Integer score;
    private Integer rank;
    private java.util.Date quizAttemptTime;
    private Long quizId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserQuizReportDao myDao;

    private Quiz quiz;
    private Long quiz__resolvedKey;


    public UserQuizReport() {
    }

    public UserQuizReport(Long userQuizReportId) {
        this.userQuizReportId = userQuizReportId;
    }

    public UserQuizReport(Long userQuizReportId, Long userId, Integer duration, Integer score, Integer rank, java.util.Date quizAttemptTime, Long quizId) {
        this.userQuizReportId = userQuizReportId;
        this.userId = userId;
        this.duration = duration;
        this.score = score;
        this.rank = rank;
        this.quizAttemptTime = quizAttemptTime;
        this.quizId = quizId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserQuizReportDao() : null;
    }

    public Long getUserQuizReportId() {
        return userQuizReportId;
    }

    public void setUserQuizReportId(Long userQuizReportId) {
        this.userQuizReportId = userQuizReportId;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Integer getDuration() {
        return duration;
    }

    public void setDuration(Integer duration) {
        this.duration = duration;
    }

    public Integer getScore() {
        return score;
    }

    public void setScore(Integer score) {
        this.score = score;
    }

    public Integer getRank() {
        return rank;
    }

    public void setRank(Integer rank) {
        this.rank = rank;
    }

    public java.util.Date getQuizAttemptTime() {
        return quizAttemptTime;
    }

    public void setQuizAttemptTime(java.util.Date quizAttemptTime) {
        this.quizAttemptTime = quizAttemptTime;
    }

    public Long getQuizId() {
        return quizId;
    }

    public void setQuizId(Long quizId) {
        this.quizId = quizId;
    }

    /** To-one relationship, resolved on first access. */
    public Quiz getQuiz() {
        Long __key = this.quizId;
        if (quiz__resolvedKey == null || !quiz__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuizDao targetDao = daoSession.getQuizDao();
            Quiz quizNew = targetDao.load(__key);
            synchronized (this) {
                quiz = quizNew;
            	quiz__resolvedKey = __key;
            }
        }
        return quiz;
    }

    public void setQuiz(Quiz quiz) {
        synchronized (this) {
            this.quiz = quiz;
            quizId = quiz == null ? null : quiz.getQuizId();
            quiz__resolvedKey = quizId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
