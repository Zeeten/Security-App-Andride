package com.acmatics.securityguardexchange.dao;

import com.acmatics.securityguardexchange.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "QUIZ_QUESTION".
 */
public class QuizQuestion {

    private Long quizQuestionId;
    private Long quizId;
    private Long questionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuizQuestionDao myDao;

    private Question question;
    private Long question__resolvedKey;

    private Quiz quiz;
    private Long quiz__resolvedKey;


    public QuizQuestion() {
    }

    public QuizQuestion(Long quizQuestionId) {
        this.quizQuestionId = quizQuestionId;
    }

    public QuizQuestion(Long quizQuestionId, Long quizId, Long questionId) {
        this.quizQuestionId = quizQuestionId;
        this.quizId = quizId;
        this.questionId = questionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuizQuestionDao() : null;
    }

    public Long getQuizQuestionId() {
        return quizQuestionId;
    }

    public void setQuizQuestionId(Long quizQuestionId) {
        this.quizQuestionId = quizQuestionId;
    }

    public Long getQuizId() {
        return quizId;
    }

    public void setQuizId(Long quizId) {
        this.quizId = quizId;
    }

    public Long getQuestionId() {
        return questionId;
    }

    public void setQuestionId(Long questionId) {
        this.questionId = questionId;
    }

    /** To-one relationship, resolved on first access. */
    public Question getQuestion() {
        Long __key = this.questionId;
        if (question__resolvedKey == null || !question__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionDao targetDao = daoSession.getQuestionDao();
            Question questionNew = targetDao.load(__key);
            synchronized (this) {
                question = questionNew;
            	question__resolvedKey = __key;
            }
        }
        return question;
    }

    public void setQuestion(Question question) {
        synchronized (this) {
            this.question = question;
            questionId = question == null ? null : question.getQuestionId();
            question__resolvedKey = questionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Quiz getQuiz() {
        Long __key = this.quizId;
        if (quiz__resolvedKey == null || !quiz__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuizDao targetDao = daoSession.getQuizDao();
            Quiz quizNew = targetDao.load(__key);
            synchronized (this) {
                quiz = quizNew;
            	quiz__resolvedKey = __key;
            }
        }
        return quiz;
    }

    public void setQuiz(Quiz quiz) {
        synchronized (this) {
            this.quiz = quiz;
            quizId = quiz == null ? null : quiz.getQuizId();
            quiz__resolvedKey = quizId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
