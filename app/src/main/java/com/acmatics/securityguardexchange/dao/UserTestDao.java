package com.acmatics.securityguardexchange.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.acmatics.securityguardexchange.dao.UserTest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TEST".
*/
public class UserTestDao extends AbstractDao<UserTest, Long> {

    public static final String TABLENAME = "USER_TEST";

    /**
     * Properties of entity UserTest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserTestId = new Property(0, Long.class, "userTestId", true, "USER_TEST_ID");
        public final static Property MaxDuration = new Property(1, Integer.class, "maxDuration", false, "MAX_DURATION");
    };


    public UserTestDao(DaoConfig config) {
        super(config);
    }
    
    public UserTestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TEST\" (" + //
                "\"USER_TEST_ID\" INTEGER PRIMARY KEY ," + // 0: userTestId
                "\"MAX_DURATION\" INTEGER);"); // 1: maxDuration
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TEST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserTest entity) {
        stmt.clearBindings();
 
        Long userTestId = entity.getUserTestId();
        if (userTestId != null) {
            stmt.bindLong(1, userTestId);
        }
 
        Integer maxDuration = entity.getMaxDuration();
        if (maxDuration != null) {
            stmt.bindLong(2, maxDuration);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserTest readEntity(Cursor cursor, int offset) {
        UserTest entity = new UserTest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userTestId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // maxDuration
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserTest entity, int offset) {
        entity.setUserTestId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMaxDuration(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserTest entity, long rowId) {
        entity.setUserTestId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserTest entity) {
        if(entity != null) {
            return entity.getUserTestId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
