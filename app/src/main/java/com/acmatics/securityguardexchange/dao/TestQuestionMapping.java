package com.acmatics.securityguardexchange.dao;

import com.acmatics.securityguardexchange.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TEST_QUESTION_MAPPING".
 */
public class TestQuestionMapping {

    private Long testQuestionMappingId;
    private Long questionId;
    private Long userTestId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TestQuestionMappingDao myDao;

    private Question question;
    private Long question__resolvedKey;

    private UserTest userTest;
    private Long userTest__resolvedKey;


    public TestQuestionMapping() {
    }

    public TestQuestionMapping(Long testQuestionMappingId) {
        this.testQuestionMappingId = testQuestionMappingId;
    }

    public TestQuestionMapping(Long testQuestionMappingId, Long questionId, Long userTestId) {
        this.testQuestionMappingId = testQuestionMappingId;
        this.questionId = questionId;
        this.userTestId = userTestId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTestQuestionMappingDao() : null;
    }

    public Long getTestQuestionMappingId() {
        return testQuestionMappingId;
    }

    public void setTestQuestionMappingId(Long testQuestionMappingId) {
        this.testQuestionMappingId = testQuestionMappingId;
    }

    public Long getQuestionId() {
        return questionId;
    }

    public void setQuestionId(Long questionId) {
        this.questionId = questionId;
    }

    public Long getUserTestId() {
        return userTestId;
    }

    public void setUserTestId(Long userTestId) {
        this.userTestId = userTestId;
    }

    /** To-one relationship, resolved on first access. */
    public Question getQuestion() {
        Long __key = this.questionId;
        if (question__resolvedKey == null || !question__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionDao targetDao = daoSession.getQuestionDao();
            Question questionNew = targetDao.load(__key);
            synchronized (this) {
                question = questionNew;
            	question__resolvedKey = __key;
            }
        }
        return question;
    }

    public void setQuestion(Question question) {
        synchronized (this) {
            this.question = question;
            questionId = question == null ? null : question.getQuestionId();
            question__resolvedKey = questionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public UserTest getUserTest() {
        Long __key = this.userTestId;
        if (userTest__resolvedKey == null || !userTest__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserTestDao targetDao = daoSession.getUserTestDao();
            UserTest userTestNew = targetDao.load(__key);
            synchronized (this) {
                userTest = userTestNew;
            	userTest__resolvedKey = __key;
            }
        }
        return userTest;
    }

    public void setUserTest(UserTest userTest) {
        synchronized (this) {
            this.userTest = userTest;
            userTestId = userTest == null ? null : userTest.getUserTestId();
            userTest__resolvedKey = userTestId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
