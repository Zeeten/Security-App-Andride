package com.acmatics.securityguardexchange.dao;

import com.acmatics.securityguardexchange.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "QUIZ".
 */
public class Quiz {

    private Long quizId;
    private java.util.Date quizDate;
    private Long quizTypeId;
    private String quizName;
    private String description;
    private Integer maxDuration;
    private Integer questionCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuizDao myDao;

    private QuizType quizType;
    private Long quizType__resolvedKey;


    public Quiz() {
    }

    public Quiz(Long quizId) {
        this.quizId = quizId;
    }

    public Quiz(Long quizId, java.util.Date quizDate, Long quizTypeId, String quizName, String description, Integer maxDuration, Integer questionCount) {
        this.quizId = quizId;
        this.quizDate = quizDate;
        this.quizTypeId = quizTypeId;
        this.quizName = quizName;
        this.description = description;
        this.maxDuration = maxDuration;
        this.questionCount = questionCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuizDao() : null;
    }

    public Long getQuizId() {
        return quizId;
    }

    public void setQuizId(Long quizId) {
        this.quizId = quizId;
    }

    public java.util.Date getQuizDate() {
        return quizDate;
    }

    public void setQuizDate(java.util.Date quizDate) {
        this.quizDate = quizDate;
    }

    public Long getQuizTypeId() {
        return quizTypeId;
    }

    public void setQuizTypeId(Long quizTypeId) {
        this.quizTypeId = quizTypeId;
    }

    public String getQuizName() {
        return quizName;
    }

    public void setQuizName(String quizName) {
        this.quizName = quizName;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getMaxDuration() {
        return maxDuration;
    }

    public void setMaxDuration(Integer maxDuration) {
        this.maxDuration = maxDuration;
    }

    public Integer getQuestionCount() {
        return questionCount;
    }

    public void setQuestionCount(Integer questionCount) {
        this.questionCount = questionCount;
    }

    /** To-one relationship, resolved on first access. */
    public QuizType getQuizType() {
        Long __key = this.quizTypeId;
        if (quizType__resolvedKey == null || !quizType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuizTypeDao targetDao = daoSession.getQuizTypeDao();
            QuizType quizTypeNew = targetDao.load(__key);
            synchronized (this) {
                quizType = quizTypeNew;
            	quizType__resolvedKey = __key;
            }
        }
        return quizType;
    }

    public void setQuizType(QuizType quizType) {
        synchronized (this) {
            this.quizType = quizType;
            quizTypeId = quizType == null ? null : quizType.getQuizTypeId();
            quizType__resolvedKey = quizTypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
